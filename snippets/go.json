{
	".source.go": {
		"defer err2.Catch to stderr": {
			"prefix": "ecte",
			"body": "defer err2.Catch(err2.Stderr)\n",
			"description": "Snippet for err2.Catch(Stderr)"
		},
		"defer err2.Catch to stdout": {
			"prefix": "ecto",
			"body": "defer err2.Catch(err2.Stdout)\n",
			"description": "Snippet for err2.Catch(Stdout)"
		},
		"defer err2.Catch": {
			"prefix": "eca",
			"body": "defer err2.Catch()\n",
			"description": "Snippet for err2.Catch(&err)"
		},
		"defer err2.Catch func": {
			"prefix": "ecaf",
			"body": "defer err2.Catch(func(err error) error {\n\t$0\n})\n",
			"description": "Snippet for err2.Catch(func(err error) error {})"
		},
		"defer err2.Handle": {
			"prefix": "eha",
			"body": "defer err2.Handle(&err)\n",
			"description": "Snippet for err2.Handle(&err)"
		},
		"defer err2.Handle nil": {
			"prefix": "ehan",
			"body": "defer err2.Handle(&err, nil)\n",
			"description": "Snippet for err2.Handle(&err, nil)"
		},
		"defer err2.Handle func": {
			"prefix": "ehaf",
			"body": "defer err2.Handle(&err, func(err error) error {\n\t$0\n})\n",
			"description": "Snippet for err2.Handle(&err, func(err error) error {})"
		},
		"defer assert.PushAsserter(asserter.Plain)()": {
			"prefix": "apu",
			"body": "defer assert.PushAsserter(${1:asserter.Plain})()\n",
			"description": "Snippet for 1-liner pushing AND poping asserter.Plain"
		},
		"defer assert.PushTester(t)()": {
			"prefix": "aspa",
			"body": "defer assert.PushTester(${1:t})()\n",
			"description": "Snippet for 1-liner pushing AND poping current tester"
		},
		"assert.Push&PopTester()": {
			"prefix": "aspu",
			"body": "assert.PushTester(${1:t})\ndefer assert.PopTester()\n",
			"description": "Snippet for pushing current tester"
		},
		"assert.That()": {
			"prefix": "asth",
			"body": "assert.That(${1:bool}$2)",
			"description": "Snippet for generic That assert"
		},
		"assert.Equal()": {
			"prefix": "aseq",
			"body": "assert.Equal(${1:got}, ${2:want}$3)",
			"description": "Snippet for Equal assert"
		},
		"assert.NotImplemented()": {
			"prefix": "asni",
			"body": "assert.NotImplemented($1)",
			"description": "Snippet for not implemented assert"
		},
		"assert.NotNil()": {
			"prefix": "asnn",
			"body": "assert.NotNil(${1:ptr}$2)",
			"description": "Snippet for NotNil assert"
		},
		"assert.INotNil()": {
			"prefix": "asinn",
			"body": "assert.INotNil(${1:interface}$2)",
			"description": "Snippet for INotNil assert"
		}
	}
}

